.. index:: Acc-Py
.. _acc-py:

========================
The environment: Acc-Py
========================

What is Acc-Py?
===============

BE/CO maintains a shared Python distribution called **Acc-Py**. It's an Anaconda-style distribution, meaning that it
comes with a set of packages and a command-line tool (called ``acc-py``) for small operations like project creation,
CI setup, documentation, project release, etc.  It also comes with its own package repository.

BE/BI's project template is based on Acc-Py, but adds a great deal of features over it.
Nonetheless it is useful to know what features Acc-Py offers too.

.. note:: Remember that the Acc-Py documentation (on
    `Confluence <https://wikis.cern.ch/display/ACCPY/Accelerating+Python+Home>`_ and on `
    `ReadTheDocs <https://acc-py.web.cern.ch/gitlab/acc-co/devops/python/acc-py-devtools/docs/stable/>`_)
    is the only official resource regarding Acc-Py features.
    If you have any trouble, please refer to their documentation first to make sure this page is not outdated.

.. note:: Acc-Py is accessible from all machines on the TN network. At the time of writing (May 2020) it is not
    accessible from GPN, but this issue is currently being fixed and a future release will probably be accessible
    from the outside as well **(PLEASE UPDATE THIS SECTION)**.


.. index:: Acc-Py Features
.. _acc-py_features:

What does it provide?
=====================

Acc-Py is fairly recent (introduced in late 2019) and in rapid evolution. Therefore the best idea is always to refer to
the official documentation (`here <https://wikis.cern.ch/display/ACCPY/Accelerating+Python+Home>`_).

At the time of writing (May 2020), the main features of the Acc-Py distribution are:

    * **The package repository**. The `Acc-Py repository <http://acc-py-repo:8081>`_ acts at the same time as a
      package manager for CERN specific Python packages, and as a proxy to the central PyPi servers.
      Regular CERN releases target this repository.

    * **The acc-py command line tool**. It can be used to automate maintenance and routine operations of various type,
      for example:

        - Project creation, with ``acc-py init``
        - Virtualenv setup with ``acc-py venv``
        - CI setup, with ``acc-py init-ci``
        - Autogenerated documentation on the `Acc-Py ReadTheDocs server <https://acc-py.web.cern.ch>`_,
          with ``acc-py init-docs``
        - Code linting with ``acc-py check``

      and more.

.. index:: Activate Acc-Py
.. _acc-py_usage:

How do I use it?
================

First of all, you should activate Acc-Py. Open a terminal and type::

	source /acc/local/share/python/acc-py-pyqt/setup.sh

This will activate the environment. Such script will not simply point your shell to a specific Python executable, but
in fact is pointing you to a full-fledged distribution. You can check that by typing::

	pip freeze

This gives you the list of all the packages which are automatically available from any Python script running into
Acc-Py. At this point, you can already start developing a simple script that uses, for example, ``numpy``, ``pyjapc``
or other libraries.


.. index:: Virtualenvs
.. _acc-py_virtualenv:

Can I install/remove packages?
==============================

To install your own packages, or change version to the existing ones, you should setup your own virtual environment
to ensure isolation between different projects. To do so, type::

	acc-py venv

The newly created virtualenv can be activated by simply typing::

	source venv/bin/activate

This gives you a blank slate, where you can install all and only the packages you need and specify their versions
freely.

This setup gives you the freedom of a plain local Python install, but it comes already wired to the `CERN Python
repository <http://acc-py-repo:8081>`_, so saving you a few configuration steps.
In addition, the Python version is constantly updated, ensuring uniformity among all CERN machines without having
to stick to older Python versions.


.. index:: init project
.. index:: Release
.. _acc-py_release:

Can I release my project?
=========================

At this point, users can write their own Python scripts, manage their dependencies, and run their code on any TN
machine. What about releasing?

The Python Package Repository, as the name implies, hosts only Python *packages*: this means users have to package their
code before being able to release. Such process is also semi-automated by the command::

	acc-py init

It will generate (in the current folder) a package template consisting of number of files:

    * an empty ``__init__.py``,
    * a basic, semi-complete ``setup.py`` (check
      `this SO thread <https://stackoverflow.com/questions/1471994/what-is-setup-py>`_
      to learn more about ``setup.py``),
    * a ``README.md``,
    * a ``test/`` folder with an example test inside.

Once done, the user only has to edit the ``setup.py`` files adding its project dependencies and a few other information
(like their own name and email as authors). After that, the project can be released by typing::

	acc-py devrelease

.. warning:: this command succeeds only if you **upgraded the version number** into ``setup.py`` since the last time
        you issued it.

.. index:: Other Features of Acc-Py
.. _acc-py_other_features:

Other features
==============

Acc-Py can do a lot more. Notable features are:

    * *Code Linting*. Typing ``acc-py check`` runs a few linters against your code and provides you with a code quality
      report. See the `dedicated section on code linting <7-testing#linting>`_.

    * *GitLab CI setup*. Typing ``acc-py init-ci`` creates a standard GitLab CI configuration file that takes care of
      setting up an automated testing pipeline. In short, it will tell GitLab to run all your tests every time you
      upload new code and inform you whether any of those tests failed. It will also devrelease your project every time
      you create a new tag on GitLab.
      See the `description of GitLab CI config file <2-project-structure#gitlab-ci-yml>`_.

    * *Automatic Documentation*. Typing ``acc-py init-docs`` creates a basic Sphinx setup that autogenerates an API
      description based on your code and your in-code comments. Such documentation will be visible directly at
      `this link <https://acc-py.web.cern.ch>`_.
      See the `description of the docu/ folder <4-project-structure#docs_folder>`_.

More features are currently planned for release but not available yet. For an overview of all the available command,
type::

	acc-py

And read through the help message. If you want to know more about this tool and its capabilities, refer to the
`official Acc-Py documentation <https://wikis.cern.ch/display/ACCPY/Accelerating+Python+Home>`_  and the
`technical docs <https://acc-py.web.cern.ch/gitlab/acc-co/devops/python/acc-py-devtools/docs/stable/>`_.


.. index:: Acc-Py FAQ
.. _acc-py_faq:
FAQ
===

*TODO*
